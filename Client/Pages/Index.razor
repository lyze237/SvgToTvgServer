@page "/"
@using Blazor.DownloadFileFast.Interfaces
@using System.Text
@using System.IO
@inject HttpClient http
@inject IBlazorDownloadFileService downloader

<Jumbotron Background="Background.Body" Margin="Margin.Is4">
    <JumbotronTitle Size="JumbotronTitleSize.Is2">Svg to Tvg Converter</JumbotronTitle>
    <JumbotronSubtitle>
        Use this free online converter to convert SVG files to TVG files, without having to install any software.
    </JumbotronSubtitle>
</Jumbotron>

<Accordion>
    <Collapse Visible="true">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">Upload</Heading>
        </CollapseHeader>
        <CollapseBody>
            <FileEdit Filter=".svg" Changed="@SetSvgFile" />
            <Button class="mt-3" Loading="isLoadingResult" Color="Color.Primary" PreventDefaultOnSubmit="true" disabled="@disableSubmitButton" Clicked="SubmitSvgFile">Upload</Button>
        </CollapseBody>
    </Collapse>
    
    @if (result != null)
    {
        @for (var i = 0; i < result.Steps.Count; i++)
        {
            var step = result.Steps[i];
            var idx = i;
            <Collapse Visible="@IsAccordionVisible(i)">
                <CollapseHeader>
                    <Heading Size="HeadingSize.Is5">
                        <Button Color="Color.Info" Outline Clicked="() => ToggleAccordion(idx)">@step.StepName</Button> <Button Color="Color.Primary" class="float-right" Clicked="() => DownloadStep(step)"><Icon Name="IconName.Download" /></Button>
                    </Heading>
                </CollapseHeader>
                <CollapseBody>
                    <code>
                        @step.FileContent
                    </code>
                </CollapseBody>
            </Collapse>
        }
        
        <Collapse Visible="true">
            <CollapseHeader>
                <Heading Size="HeadingSize.Is5">Png <Button Color="Color.Success" class="float-right" Clicked="DownloadImage"><Icon Name="IconName.Download" /></Button></Heading>
            </CollapseHeader>
            <CollapseBody>
                <img src="data:image/png;base64,@result.Png" alt=""/>
            </CollapseBody>
        </Collapse>
    }
</Accordion>

@code
{
    private IFileEntry svgFile;
    private string svgFileName;
    
    private bool disableSubmitButton = true;

    private bool isLoadingResult;
    private TvgResult result;

    private readonly Dictionary<int, bool> states = new();
    private void ToggleAccordion(int index)
    {
        var isVisible = IsAccordionVisible(index);
        states[index] = !isVisible;
        Console.WriteLine($"Toggle Accordion {index} from {isVisible} to {states[index]}");
    }

    private bool IsAccordionVisible(int index)
    {
        Console.WriteLine($"Is According Visible? {index}");
        return states.ContainsKey(index) && states[index];
    }

    private void SetSvgFile(FileChangedEventArgs arg)
    {
        svgFile = arg.Files.FirstOrDefault();
        disableSubmitButton = svgFile == null;
    }
    
    private async Task SubmitSvgFile()
    {
        isLoadingResult = true;
        svgFileName = svgFile.Name;
        var content = new MultipartFormDataContent();
        content.Add(new StreamContent(svgFile.OpenReadStream()), "svg");
        var response = await http.PostAsync("Tvg", content);
        result = response.Content.ReadFromJsonAsync<TvgResult>().Result;
        isLoadingResult = false;
    }

    private async Task DownloadImage() => 
        await downloader.DownloadFileAsync($"{Path.GetFileNameWithoutExtension(svgFileName)}.png", Convert.FromBase64String(result.Png));

    private async Task DownloadStep(TvgStep step) =>
        await downloader.DownloadFileAsync($"{Path.GetFileNameWithoutExtension(svgFileName)}.{step.Extension}", step.IsBase64 ? Convert.FromBase64String(step.FileContent) : Encoding.UTF8.GetBytes(step.FileContent));

}
